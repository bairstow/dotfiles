* Package initialisation

** package installation
required before any package configuration can be made
#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives
             '("melpa-stable" . "http://stable.melpa.org/packages/") t)
(package-initialize)
#+END_SRC

define the packages that would like to be installed
#+BEGIN_SRC emacs-lisp
(defvar my-packages
  '(paredit
    cider
    smex
    rainbow-delimiters
    magit))
(dolist (p my-packages)
  (when (not (package-installed-p p))
    (package-install p)))
#+END_SRC

** add local set packages
awesome-tab for displaying buffers as tabs
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/git/packages/awesome-tab")
(require 'awesome-tab)
(awesome-tab-mode t)
#+END_SRC

projectile for project interaction and navigation
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/git/packages/projectile")
(require 'projectile)
(projectile-mode +1)
(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
(setq projectile-project-search-path '("~/git/"))
#+END_SRC



* Load and configure EVIL mode

load and enable evil source files
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/git/packages/evil")
(require 'evil)
(evil-mode 1)
#+END_SRC

load and enable evil leader
- Evil Leader provides the <leader> feature from Vim that provides an easy way to bind keys under a variable prefix key.
added key bindings
- <'><'> - save current buffer
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/git/packages/evil-leader")
(require 'evil-leader)
(global-evil-leader-mode 1)
(evil-leader/set-leader ",")
(evil-leader/set-key "," 'save-buffer)
(evil-leader/set-key "t" 'awesome-tab-ace-jump)
#+END_SRC

load and enable evil-adjust for lisp eval fix
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/git/packages/evil-adjust")
(require 'evil-adjust)
(evil-adjust)
#+END_SRC

bind 'jk' to return to normal mode
#+BEGIN_SRC emacs-lisp
(defun my-jk ()
  (interactive)
  (let* ((initial-key ?j)
        (final-key ?k)
        (timeout 0.5)
        (event (read-event nil nil timeout)))
    (if event
        ;; timeout met
        (if (and (characterp event) (= event final-key))
            (evil-normal-state)
          (insert initial-key)
          (push event unread-command-events))
      ;; timeout exceeded
      (insert initial-key))))

(define-key evil-insert-state-map (kbd "j") 'my-jk)
#+END_SRC


* UI Customisation

set menu bar disabled
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
#+END_SRC

set tool bar disabled
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
#+END_SRC

set scroll bars disabled
#+BEGIN_SRC emacs-lisp
(when (fboundp 'scroll-bar-mode)
  (scroll-bar-mode -1))
#+END_SRC

set cursor blink disabled
#+BEGIN_SRC emacs-lisp
(blink-cursor-mode 0)
#+END_SRC

set bell noise notification disabled
#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
#+END_SRC

set display line numbers enabled
#+BEGIN_SRC emacs-lisp
(global-linum-mode 1)
#+END_SRC

set initial startup message disabled
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
#+END_SRC

haven't yet found a means to set a display margin around the entire window (in similar fashion to vim)
(setq left-margin-width 4)
(setq right-margin-width 4)
#+BEGIN_SRC emacs-lisp
#+END_SRC


* UI Theme

set default load theme
#+BEGIN_SRC emacs-lisp
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
(load-theme 'gruvbox-dark-soft t)
#+END_SRC


* Editing

highlight matching parenthesis
#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
#+END_SRC


* Clojure mode setup

paredit enabled
#+BEGIN_SRC emacs-lisp
(add-hook 'clojure-mode-hook 'enable-paredit-mode)
#+END_SRC

rainbow delimiters enabled
#+BEGIN_SRC emacs-lisp
(add-hook 'clojure-mode-hook 'rainbow-delimiters-mode)
#+END_SRC

add java executable to path
#+BEGIN_SRC emacs-lisp
(setenv "PATH" (concat (getenv "PATH") ":/usr/bin/java/jdk1.8.0_202/bin"))
(setq exec-path (append exec-path '("/usr/bin/java/jdk1.8.0_202/bino")))
#+END_SRC

